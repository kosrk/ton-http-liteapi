package api

// Code autogenerated. DO NOT EDIT.

import (
	"fmt"
	"github.com/kosrk/ton-http-liteapi/utils"
	log "github.com/sirupsen/logrus"
	"github.com/startfellows/tongo/liteclient"
	"net/http"
)

func (h *Handler) LiteServerGetMasterchainInfo(resp http.ResponseWriter, req *http.Request) {
	response, err := h.blockchain.LiteServerGetMasterchainInfo(req.Context())

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerGetMasterchainInfoExt(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerGetMasterchainInfoExtRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerGetMasterchainInfoExt(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerGetTime(resp http.ResponseWriter, req *http.Request) {
	response, err := h.blockchain.LiteServerGetTime(req.Context())

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerGetBlock(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerGetBlockRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerGetBlock(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerGetState(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerGetStateRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerGetState(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerGetBlockHeader(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerGetBlockHeaderRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerGetBlockHeader(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerSendMessage(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerSendMessageRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerSendMessage(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerGetAccountState(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerGetAccountStateRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerGetAccountState(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerGetShardInfo(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerGetShardInfoRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerGetShardInfo(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerGetAllShardsInfo(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerGetAllShardsInfoRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerGetAllShardsInfo(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerGetTransactions(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerGetTransactionsRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerGetTransactions(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerListBlockTransactions(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerListBlockTransactionsRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerListBlockTransactions(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerGetBlockProof(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerGetBlockProofRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerGetBlockProof(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerGetConfigAll(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerGetConfigAllRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerGetConfigAll(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func (h *Handler) LiteServerGetShardBlockProof(resp http.ResponseWriter, req *http.Request) {
	var request liteclient.LiteServerGetShardBlockProofRequest

	err := utils.JsonDecoder(req.Body).Decode(&request)
	if err != nil {
		writeHttpError(resp, http.StatusBadRequest, fmt.Sprintf("decode payload err: %v", err))
		return
	}
	response, err := h.blockchain.LiteServerGetShardBlockProof(req.Context(), request)

	if err != nil {
		writeHttpError(resp, http.StatusInternalServerError, fmt.Sprintf("liteserver request err: %v", err))
		return
	}
	err = utils.JsonEncoder(resp).Encode(response)
	if err != nil {
		log.Errorf("response json encoding error: %v", err)
	}
}

func RegisterHandlers(mux *http.ServeMux, h *Handler) {
	mux.HandleFunc("/v1/lite_server_get_masterchain_info", recoverMiddleware(post(h.LiteServerGetMasterchainInfo)))
	mux.HandleFunc("/v1/lite_server_get_masterchain_info_ext", recoverMiddleware(post(h.LiteServerGetMasterchainInfoExt)))
	mux.HandleFunc("/v1/lite_server_get_time", recoverMiddleware(post(h.LiteServerGetTime)))
	mux.HandleFunc("/v1/lite_server_get_block", recoverMiddleware(post(h.LiteServerGetBlock)))
	mux.HandleFunc("/v1/lite_server_get_state", recoverMiddleware(post(h.LiteServerGetState)))
	mux.HandleFunc("/v1/lite_server_get_block_header", recoverMiddleware(post(h.LiteServerGetBlockHeader)))
	mux.HandleFunc("/v1/lite_server_send_message", recoverMiddleware(post(h.LiteServerSendMessage)))
	mux.HandleFunc("/v1/lite_server_get_account_state", recoverMiddleware(post(h.LiteServerGetAccountState)))
	mux.HandleFunc("/v1/lite_server_get_shard_info", recoverMiddleware(post(h.LiteServerGetShardInfo)))
	mux.HandleFunc("/v1/lite_server_get_all_shards_info", recoverMiddleware(post(h.LiteServerGetAllShardsInfo)))
	mux.HandleFunc("/v1/lite_server_get_transactions", recoverMiddleware(post(h.LiteServerGetTransactions)))
	mux.HandleFunc("/v1/lite_server_list_block_transactions", recoverMiddleware(post(h.LiteServerListBlockTransactions)))
	mux.HandleFunc("/v1/lite_server_get_block_proof", recoverMiddleware(post(h.LiteServerGetBlockProof)))
	mux.HandleFunc("/v1/lite_server_get_config_all", recoverMiddleware(post(h.LiteServerGetConfigAll)))
	mux.HandleFunc("/v1/lite_server_get_shard_block_proof", recoverMiddleware(post(h.LiteServerGetShardBlockProof)))
}
